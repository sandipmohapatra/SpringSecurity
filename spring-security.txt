Spring security
-------------------------------
1)security is one of the most important component of any web-based application.

2)The goal of security is to provide client with an assurance about the integrity and safety of the customer's data and system function.

3)some application or website are without login page so it is not safe for the end users. 


4)Authentication protects website from end users with the help of username/password.

Types of Authentication
---------------------------------------
a)Form Based Authentication.for web application where client browser is used where login page will be displayed and we enter username/password.

b)Basic Authentication.for webservices projects we used this.My services will be consumed by client component.we call it web component in place of web browser.

c)OAuth Authentication for micro-services project we will go for this.
example :- redbus.in uses facebook login or Google login

d)JWT Authentication will provide encryped password using SHA algorithim.

5)authorization protects webpages within website with the help of roles.

6)In database the usernames and passwords are stored in the text format but not in hashing format.So who ever login to the database can access the whole login credentials.so it is not secured.

7)Hashing protects passwords stored in DB server or LDAP server.

8)so we have to use password hashing .There are 2 ways of hashing
a)one way hashing  -in this once it is hashed we cannot rehash.

b)two way hashing  -in this once it is hashed we can rehash means we can convert back to plain text.

* spring security use one way hashing.

during sign up password is hashed and stored in DB server or LDAP server.

during sign in it matched with the password and sign in to the application.

so during forgot password most application ask us to reset the password.Because it cannot provide password in text format.it only use one way hashing.

Any website providing text format password means it is not secured.It is not using hashing technic.

*it is compromizing with password store.


9)when we use http protocal inplace of https an intruder can view or capture your transaction using tcpmon tool.like (password,creditcard no or valuable information)

10)Digital Certificates protects data between web browser and web server in encrypted format.
so server and browser will send between them encrypted request and response and decrypt using private key . if the intruder capture any encrypted messages then he cannot decrypt because he does not have the private key.
--------------------------------------------------------------------------------------------------------------------

11)Form Based Authentication 

 i)In Memory Authentication :- if we store login,password,authority in memory 
ii)Jdbc Authentication:-if we store login,password,authority in database
iii)LDAP Authentication:-if we store login,password,authority in Ldap server. 

So don't think that only using username and password we are providing security to our application.We have to implement all these things.(Authentication,authorization,hashing and Digital Certificates)

Non functional mechanism are logging, security, transation management ,exception handling.

functional mechanism are bussiness logic.

----------------------------------------------------------------------------------------------------------------------
Technologies that support Spring Security Integration

Spring Security framework supports wide range of authentication models. 
These models either provided by third parties or framework itself. 
Spring Security supports integration with all of these technologies.

HTTP BASIC authentication headers
HTTP Digest authentication headers
LDAP (Lighweight Directory Access Protocol)
Form-based authentication
OpenID authentication
Automatic remember-me authentication

-------------------------------------------------------------------------------------------------------------------------
Spring Security Features
It is an open application protocol over an Internet Protocol.

Single sign-on
This feature allows a user to access multiple applications with the help of single account(user name and password).

JAAS (Java Authentication and Authorization Service) LoginModule
It is a Pluggable Authentication Module implemented in Java. Spring Security supports it for its authentication process.

Basic Access Authentication
Spring Security supports Basic Access Authentication that is used to provide user name and password while making request over the network.

Digest Access Authentication
This feature allows us to make authentication process more secure than Basic Access Authentication. It asks to the browser to confirm the identity of the user before sending sensitive data over the network.

Remember-me
Spring Security supports this feature with the help of HTTP Cookies. It remember to the user and avoid login again from the same machine until the user logout.

Web Form Authentication
In this process, web form collect and authenticate user credentials from the web browser. Spring Security supports it while we want to implement web form authentication.

Authorization
Spring Security provides the this feature to authorize the user before accessing resources. It allows developers to define access policies against the resources.

HTTP Authorization
Spring provides this feature for HTTP authorization of web request URLs using Apache Ant paths or regular expressions.

OAuth Login
This feature provides the facility to the user to login into the application by using their existing account at GitHub or Google. 

Modernized Password Encoding
Spring Security 5.0 introduced new Password encoder DelegatingPasswordEncoder which is more modernize and solve all the problems of previous encoder.
---------------------------------------------------------------------------------------------------------------------------------------
Spring Project Modules
In Spring Security 3.0, the Security module is divided into separate jar files. The purpose was to divide jar files based on their functionalities, so, the developer can integrate according to their requirement.

It also helps to set required dependency into pom.xml file of maven project.

The following are the jar files that are included into Spring Security module.

spring-security-core.jar
spring-security-remoting.jar
spring-security-web.jar
spring-security-config.jar
spring-security-ldap.jar
spring-security-oauth2-core.jar
spring-security-oauth2-client.jar
spring-security-oauth2-jose.jar
spring-security-acl.jar
spring-security-cas.jar
spring-security-openid.jar
spring-security-test.jar
Core - spring-security-core.jar
This is core jar file and required for every application that wants to use Spring Security. This jar file includes core access-control and core authentication classes and interfaces. We can use it in standalone applications or remote clients applications.

It contains top level packages:

org.springframework.security.core
org.springframework.security.access
org.springframework.security.authentication
org.springframework.security.provisioning
Remoting - spring-security-remoting.jar
This jar is used to integrate security feature into the Spring remote application. We don't need it until or unless we are creating remote application. All the classes and interfaces are located into org.springframework.security.remoting package.

Web - spring-security-web.jar
This jar is useful for Spring Security web authentication and URL-based access control. It includes filters and web-security infrastructure.

All the classes and interfaces are located into the org.springframework.security.web package.

Config - spring-security-config.jar
This jar file is required for Spring Security configuration using XML and Java both. It includes Java configuration code and security namespace parsing code. All the classes and interfaces are stored in org.springframework.security.config package.

LDAP - spring-security-ldap.jar
This jar file is required only if we want to use LDAP (Lighweight Directory Access Protocol). It includes authentication and provisioning code. All the classes and interfaces are stored into org.springframework.security.ldap package.

OAuth 2.0 Core - spring-security-oauth2-core.jar
This jar is required to integrate Oauth 2.0 Authorization Framework and OpenID Connect Core 1.0 into the application. This jar file includes the core classes for OAuth 2.0 and classes are stored into the org.springframework.security.oauth2.core package.

OAuth 2.0 Client - spring-security-oauth2-client.jar
This jar file is required to get client support for OAuth 2.0 Authorization Framework and OpenID Connect Core 1.0. This module provides OAuth login and OpenID client support. All the classes and interfaces are available from org.springframework.security.oauth2.client package.

OAuth 2.0 JOSE - spring-security-oauth2-jose.jar
It provides Spring Security's support for the JOSE (Javascript Object Signing and Encryption) framework. The JOSE framework provides methods to establish secure connection between clients. It contains following collection of specifications:

JWT (JSON Web Token)
JWS (JSON Web Signature)
JWE (JSON Web Encryption)
JWK (JSON Web Key)
All the classes and interfaces are available into these two packages:

org.springframework.security.oauth2.jwt and org.springframework.security.oauth2.jose.

ACL - spring-security-acl.jar
This jar is used to apply security to domain object in the application. We can access classes and code from the org.springframework.security.acls package.

CAS - spring-security-cas.jar
It is required for Spring Security?s CAS client integration. We can use it to integrate Spring Security web authentication with CAS single sign-on server. The source code is located into org.springframework.security.cas package.

OpenID - spring-security-openid.jar
This jar is used for OpenID web authentication support. We can use it to authenticate users against an external OpenID server. It requires OpenID4Java and top level package is org.springframework.security.openid.

Test - spring-security-test.jar
This jar provides support for testing Spring Security application.

---------------------------------------------------------------------------------------------
Spring Security Project
In this tutorial, we will implement Spring Security with the Spring MVC framework. All the examples are Spring MVC and created using Maven project.

We are using Spring Security 5.0.0.RELEASE version and following are the maven dependencies, we used in all the examples.

<dependency>  
        <groupId>org.springframework.security</groupId>  
        <artifactId>spring-security-web</artifactId>  
        <version>5.0.0.RELEASE</version>  
</dependency>  
<dependency>  
        <groupId>org.springframework.security</groupId>  
        <artifactId>spring-security-core</artifactId>  
        <version>5.0.0.RELEASE</version>  
</dependency>  
<dependency>  
        <groupId>org.springframework.security</groupId>  
        <artifactId>spring-security-config</artifactId>  
        <version>5.0.0.RELEASE</version>  
</dependency>  
To implement Spring Security in Spring application, we can configure it either by using XML or Java based configuration.

-------------------------------------------------------------------------------------------------------













 
